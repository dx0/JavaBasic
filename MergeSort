package JiH;

import java.util.Random;
import java.util.Scanner;

public class MergeSort {

    private int[] array;
    private int[] temporarryArray;
    private int length;

    public static void main(String a[]) {

        Scanner inputLenghtOfArray = new Scanner(System.in);
        System.out.println("Enter length of array: ");

        //int[] inputArr = {45, 23, 11, 89, 77, 98, 4, 28, 65, 43};

        int lengthOfArray = inputLenghtOfArray.nextInt();

        int[] inputArr = randomArray(lengthOfArray);
        System.out.print("Generated array is: ");
        for (int baseArray : inputArr) {
            System.out.print(baseArray + " ");
        }
        System.out.println();
        MergeSort mms = new MergeSort();
        mms.display(inputArr);
        System.out.print("Sorted array is: ");
        for (int showMagic : inputArr) {
            System.out.print(showMagic + " ");
        }
    }

    public static int[] randomArray(int lengthOfArray) {
        int[] randomArray = new int[lengthOfArray];
        int maxNumber = lengthOfArray + 100;
        Random random = new Random();
        for (int i = 0; i < lengthOfArray; i++) {
            randomArray[i] = random.nextInt(maxNumber);
        }
        return randomArray;
    }

    public void display(int inputArr[]) {
        this.array = inputArr;
        this.length = inputArr.length;
        this.temporarryArray = new int[length];
        doMergeSort(0, length - 1);
    }

    private void doMergeSort(int leftBound, int rihgtBound) {

        if (leftBound < rihgtBound) {
            int middleOfArray = leftBound + (rihgtBound - leftBound) / 2;
            doMergeSort(leftBound, middleOfArray);
            doMergeSort(middleOfArray + 1, rihgtBound);
            mergeParts(leftBound, middleOfArray, rihgtBound);
        }
    }

    private void mergeParts(int leftBound, int middleOfArray, int rightBound) {

        for (int i = leftBound; i <= rightBound; i++) {
            temporarryArray[i] = array[i];
        }
        int minIndexBase = leftBound;
        int middleIndexPlusOne = middleOfArray + 1;
        int minIndexNew = leftBound;
        while (minIndexBase <= middleOfArray && middleIndexPlusOne <= rightBound) {

            if (temporarryArray[minIndexBase] <= temporarryArray[middleIndexPlusOne]) {
                array[minIndexNew] = temporarryArray[minIndexBase];
                minIndexBase++;
            } else {
                array[minIndexNew] = temporarryArray[middleIndexPlusOne];
                middleIndexPlusOne++;
            }
            minIndexNew++;
        }

        while (minIndexBase <= middleOfArray) {
            array[minIndexNew] = temporarryArray[minIndexBase];
            minIndexNew++;
            minIndexBase++;
        }
    }
}


